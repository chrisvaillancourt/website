---
import Link from '@/components/Link.astro';
export interface Props {
  links?: {
    href: string;
    text: string;
  }[];
  class?: string;
}
const { links, class: className = '' } = Astro.props;
---

<div class={`hamburger-container ${className}`}>
  <input
    class="checkbox"
    type="checkbox"
    id="hamburger-toggle"
    aria-label="Toggle Navigation"
  />
  <label class="hamburger" for="hamburger-toggle">
    <span class="slice"></span>
    <span class="slice"></span>
    <span class="slice"></span>
  </label>
  <div class="drawer">
    <ul class="nav-list">
      {
        links?.map(({ href, text }) => (
          <li class="nav-list-item">
            <Link href={href} target="_self">
              {text}
            </Link>
          </li>
        ))
      }
    </ul>
  </div>
</div>
<style>
  .hamburger-container {
    --transition-duration: 0.5s;
    --easing-function: var(--ease-5);
    --slice-rotation: 45deg;
    --slice-offset-y: 12px;
    --slice-height: 2px;
    --hamburger-size: 32px;
    --hamburger-color: var(--gray-0);
  }
  .hamburger-container {
    width: max-content;
    color: var(--hamburger-color);
  }
  .hamburger-container .checkbox {
    opacity: 0; /* can't use display:none b/c it breaks keyboard nav */
    position: absolute;
  }
  .hamburger-container .checkbox:focus-visible ~ .hamburger {
    outline: auto;
    outline-offset: var(--size-1);
  }
  /* Hide any focusable elements in the drawer by default to aid keyboard navigation. We use visibility so it makes the elements unfocusable, but doesn't affect the layout. We can also add a "transition" to visibility, which will make it show instantly when we open the drawer, but take half a second to hide it when we close the drawer. */
  .hamburger-container .drawer a {
    visibility: hidden;
    transition: visibility var(--transition-duration) linear;
  }
  /* Make the focusable elements in the drawer visible when it is open. */
  .hamburger-container .checkbox:checked ~ .drawer a {
    visibility: visible;
  }
  .hamburger-container .checkbox:checked ~ .drawer {
    transform: translateX(-100%);
  }
  .hamburger-container .checkbox:checked ~ .hamburger .slice:nth-child(1) {
    transform: translateY(var(--slice-offset-y)) rotate(var(--slice-rotation));
  }
  .hamburger-container .checkbox:checked ~ .hamburger .slice:nth-child(2) {
    opacity: 0;
  }
  .hamburger-container .checkbox:checked ~ .hamburger .slice:nth-child(3) {
    transform: translateY(calc(var(--slice-offset-y) * -1))
      rotate(calc(var(--slice-rotation) * -1));
  }
  .hamburger {
    width: var(--hamburger-size);
    height: var(--hamburger-size);
    position: relative;
    display: block;
    transition: transform var(--transition-duration) var(--easing-function);
    z-index: 1;
    cursor: pointer;
    padding-top: 5px;
  }
  .hamburger .slice {
    display: block;
    width: 100%;
    height: var(--slice-height);
    background-color: var(--hamburger-color);
    transition: all var(--transition-duration) var(--easing-function);
    /* transition: transform, opacity, 
      var(--transition-duration) var(--easing-function); */
  }
  .hamburger .slice:not(:first-child) {
    margin-top: 10px;
  }
  .drawer {
    position: fixed;
    left: 100vw;
    top: 0;
    width: max-content;
    max-width: 100%;
    padding: 22px;
    background: var(--gray-10);
    /* transform: translateX(-100%); */
    transition: transform var(--transition-duration) var(--easing-function);
    border-bottom-left-radius: 10px;
  }
  .drawer .nav-list {
    padding: 0;
    margin-top: 30px;
    margin-left: 20px;
  }
  .drawer .nav-list .nav-list-item {
    padding-bottom: 10px;
  }
</style>
