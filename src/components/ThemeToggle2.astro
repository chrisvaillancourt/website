---
import {
	LIGHT_THEME_NAME,
	DARK_THEME_NAME,
	THEME_STORAGE_KEY,
} from '@/lib/theme';
import Icon from '@/components/Icon';
import { weatherSunny, weatherNight } from '@/lib/icons';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'label'> {}
const { class: className } = Astro.props;
---

<script>
	import {
		LIGHT_THEME_NAME,
		DARK_THEME_NAME,
		emitThemeChange,
		getStoredTheme,
	} from '@/lib/theme';

	const inputs = Array.from(
		document.getElementsByClassName('theme-controller'),
	);

	function setInputToStoredTheme(input: HTMLInputElement) {
		const storedTheme = getStoredTheme();
		if (!storedTheme) return;
		if (storedTheme === DARK_THEME_NAME) {
			input.checked = false;
		} else if (storedTheme === LIGHT_THEME_NAME) {
			input.checked = true;
		}
	}
	function handleInputChange(e: Event) {
		if (!e.target) {
			console.warn('theme input not found');
			return;
		}
		if (!('checked' in e.target)) {
			console.warn('theme input is not a checkbox');
			return;
		}
		const isChecked = Boolean(e.target.checked);
		const theme = isChecked ? LIGHT_THEME_NAME : DARK_THEME_NAME;
		emitThemeChange(theme);
	}

	inputs.forEach((input) => {
		input.addEventListener('change', handleInputChange);

		if (!(input instanceof HTMLInputElement)) {
			console.warn('selected theme input is not an input');
			return;
		}
		setInputToStoredTheme(input);
	});
</script>

<label class:list={['swap swap-rotate', className]}>
	<!-- if the checkbox is checked, the page will have
   the same theme as the checkbox's value  -->
	<input
		type="checkbox"
		class="peer theme-controller"
		value={LIGHT_THEME_NAME}
		data-theme-light={LIGHT_THEME_NAME}
		data-theme-dark={DARK_THEME_NAME}
	/>
	<Icon
		name="theme toggle"
		path={weatherSunny}
		class="theme-icon swap-on invisible h-7 w-7 fill-current"
		aria-hidden="true"
		focusable="false"
	/>
	<Icon
		name="theme toggle"
		path={weatherNight}
		class="theme-icon swap-off invisible h-7 w-7 fill-current"
		aria-hidden="true"
		focusable="false"
	/>
</label>
<script
	is:inline
	define:vars={{ THEME_STORAGE_KEY, LIGHT_THEME_NAME, DARK_THEME_NAME }}
>
	'use strict';
	/* 
	inlined because the theme icon will swap after initial load
	if the stored theme is different from default theme
	*/
	function getStoredTheme() {
		if (!(typeof localStorage !== 'undefined')) {
			console.warn('local storage is not available');
			return '';
		}
		const storedTheme = localStorage.getItem(THEME_STORAGE_KEY);
		return storedTheme || '';
	}
	function setInputToStoredTheme(input) {
		const storedTheme = getStoredTheme();
		if (!storedTheme) return;
		if (storedTheme === DARK_THEME_NAME) {
			input.checked = false;
		} else if (storedTheme === LIGHT_THEME_NAME) {
			input.checked = true;
		}
	}
	const inputs = Array.from(
		document.getElementsByClassName('theme-controller'),
	);
	inputs.forEach((input) => {
		setInputToStoredTheme(input);
	});
	const icons = Array.from(document.getElementsByClassName('theme-icon'));
	icons.forEach((icon) => icon.classList.toggle('invisible'));
</script>
